




def ant_colony_optimization(data, num_ants=40, num_iterations=100, alpha=1, beta=2, evaporation_rate=0.4, Q=150, p_greedy=0.5):
    # Extract data
    order_num = data["order_num"]
    vehicle_num = data["vehicle_num"]
    quantities = data["quantity"]
    costs = data["cost"]
    lower_bounds = data["lower_bounds"]
    upper_bounds = data["upper_bounds"]

    # Initialize pheromone matrix
    pheromone = [[1.0 for _ in range(vehicle_num)] for _ in range(order_num)]

    # Heuristic information: based on cost-to-quantity ratio
    # heuristic = [[(costs[i] / quantities[i]) * (upper_bounds[j] - quantities[i]) if quantities[i] <= upper_bounds[j] else 0 \
    #               for j in range(vehicle_num)] \
    #              for i in range(order_num)]

    # Best solution
    best_solution = None
    best_cost = -float("inf")

    # To store the best cost at each iteration
    iteration_data = []

    # Main loop
    for iteration in range(num_iterations):
        solutions = []
        costs_of_solutions = []

        # Step 1: Each ant constructs a solution
        for ant in range(num_ants):
            # Assign orders to vehicles
            solution = [[] for _ in range(vehicle_num)]
            vehicle_loads = [0] * vehicle_num
            total_cost = 0

            for order in range(order_num):
                # Tính heuristic động
                heuristic = []
                for vehicle in range(vehicle_num):
                    remaining_capacity = upper_bounds[vehicle] - vehicle_loads[vehicle]
                    if quantities[order] <= remaining_capacity:  # Chỉ tính nếu đơn hàng có thể gán vào xe
                        heuristic_value = (costs[order] / quantities[order]) * remaining_capacity
                    else:
                        heuristic_value = 0  # Nếu không thể gán vào xe, giá trị heuristic bằng 0
                    heuristic.append(heuristic_value)
                    
                # Calculate probabilities for each vehicle
                probabilities = []
                for vehicle in range(vehicle_num):
                    if vehicle_loads[vehicle] + quantities[order] <= upper_bounds[vehicle]:
                        tau = pheromone[order][vehicle] ** alpha
                        eta = heuristic[order][vehicle] ** beta
                        probabilities.append(tau * eta)
                    else:
                        probabilities.append(0)  # Infeasible assignment

                # Normalize probabilities
                total_prob = sum(probabilities)
                if total_prob == 0:
                    continue  # Skip this order if no valid options exist
                probabilities = [p / total_prob for p in probabilities]

                # Choose vehicle based on probabilities
                # selected_vehicle = random.choices(range(vehicle_num), weights=probabilities)[0]
                if random.random() < p_greedy:
                    # Choose vehicle with max probability
                    selected_vehicle = probabilities.index(max(probabilities))
                else:
                    # Choose randomly based on probabilities
                    selected_vehicle = random.choices(range(vehicle_num), weights=probabilities)[0]

                # Assign order to the selected vehicle
                solution[selected_vehicle].append(order)
                vehicle_loads[selected_vehicle] += quantities[order]
                total_cost += costs[order]

            # Check feasibility of the solution
            is_feasible = all(lower_bounds[vehicle] <= vehicle_loads[vehicle] <= upper_bounds[vehicle] \
                              for vehicle in range(vehicle_num))
            if is_feasible:
                solutions.append(solution)
                costs_of_solutions.append(total_cost)

        # Handle no feasible solution
        if not solutions:
            print("No feasible solution found in this iteration.")
            continue

        # Step 2: Update pheromones
        for i in range(order_num):
            for j in range(vehicle_num):
                pheromone[i][j] = max(pheromone[i][j] * (1 - evaporation_rate), 0.1)  # Evaporation with minimum level

        for solution, solution_cost in zip(solutions, costs_of_solutions):
            for vehicle, orders in enumerate(solution):
                for order in orders:
                    pheromone[order][vehicle] += Q / solution_cost  # Deposit pheromone

        # Update best solution
        for solution, solution_cost in zip(solutions, costs_of_solutions):
            if solution_cost > best_cost:
                best_cost = solution_cost
                best_solution = solution

        # Save best cost at this iteration
        iteration_data.append((iteration + 1, best_cost))

        # Print iteration status
        print(f"Iteration {iteration + 1}: Best Cost = {best_cost}")

    return best_solution, best_cost, iteration_data